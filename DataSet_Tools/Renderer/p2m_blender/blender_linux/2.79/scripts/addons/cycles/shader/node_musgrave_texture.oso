OpenShadingLanguage 1.00
# Compiled by oslc 1.7.5
# options: -q -O2 -I/home/sources/blender-release/intern/cycles/kernel/shaders -o /home/sources/blender-build/blender-2.79b-linux-glibc219-x86_64/intern/cycles/kernel/shaders/node_musgrave_texture.oso
shader node_musgrave_texture
param	int	use_mapping	0		%read{8,8} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{9,9} %write{2147483647,-1}
param	string	type	"fBM"		%read{11,245} %write{2147483647,-1}
param	float	Dimension	2		%read{1,1} %write{2147483647,-1}
param	float	Lacunarity	1		%read{5,5} %write{2147483647,-1}
param	float	Detail	2		%read{3,3} %write{2147483647,-1}
param	float	Offset	0		%read{131,305} %write{2147483647,-1}
param	float	Gain	1		%read{132,218} %write{2147483647,-1}
param	float	Scale	5		%read{10,10} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{7,7} %write{0,0} %initexpr
oparam	float	Fac	0		%read{312,312} %write{62,311}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{312,312}
global	point	P	%read{0,0} %write{2147483647,-1}
local	float	___658_f	%read{20,304} %write{20,298}
local	float	___665_rmd	%read{94,108} %write{93,93}
local	float	___665_value	%read{72,111} %write{66,110}
local	float	___665_pwr	%read{72,109} %write{67,91}
local	float	___665_pwHL	%read{72,91} %write{69,69}
local	int	___665_i	%read{72,91} %write{71,91}
local	float	___668_rmd	%read{43,45} %write{42,42}
local	float	___668_value	%read{20,61} %write{14,60}
local	float	___668_pwr	%read{20,45} %write{15,40}
local	float	___668_pwHL	%read{20,40} %write{17,17}
local	int	___668_i	%read{20,40} %write{19,40}
local	float	___671_value	%read{267,310} %write{263,309}
local	float	___671_increment	%read{267,308} %write{267,307}
local	float	___671_rmd	%read{291,308} %write{290,290}
local	float	___671_pwHL	%read{250,288} %write{249,249}
local	float	___671_pwr	%read{267,306} %write{250,288}
local	int	___671_i	%read{267,288} %write{266,288}
local	float	___675_result	%read{132,188} %write{131,187}
local	float	___675_signal	%read{136,167} %write{136,167}
local	float	___675_weight	%read{136,167} %write{132,167}
local	float	___675_rmd	%read{170,186} %write{169,169}
local	float	___675_pwHL	%read{118,167} %write{117,117}
local	float	___675_pwr	%read{136,185} %write{118,167}
local	int	___675_i	%read{136,167} %write{135,167}
local	float	___678_result	%read{215,243} %write{211,242}
local	float	___678_signal	%read{210,242} %write{209,242}
local	float	___678_weight	%read{215,242} %write{212,242}
local	float	___678_pwHL	%read{195,242} %write{194,194}
local	float	___678_pwr	%read{215,242} %write{195,242}
local	int	___678_i	%read{215,242} %write{214,242}
local	float	dimension	%read{16,248} %write{1,1}
local	float	octaves	%read{20,290} %write{4,4}
local	float	lacunarity	%read{17,288} %write{5,5}
local	float	intensity	%read{62,311} %write{6,6}
local	point	p	%read{9,298} %write{7,288}
const	float	$const1	9.9999997e-06		%read{1,5} %write{2147483647,-1}
const	float	$const2	0		%read{4,294} %write{2147483647,-1}
const	float	$const3	16		%read{3,3} %write{2147483647,-1}
const	string	$const4	"clamp"		%read{2,219} %write{2147483647,-1}
temp	float	$tmp1	%read{4,4} %write{3,3}
const	float	$const5	1		%read{6,220} %write{2147483647,-1}
const	string	$const6	"multifractal"		%read{11,11} %write{2147483647,-1}
temp	int	$tmp2	%read{12,12} %write{11,11}
temp	float	$tmp3	%read{62,62} %write{61,61}
const	string	$const7	"noise_musgrave_multi_fractal"		%read{13,13} %write{2147483647,-1}
temp	float	$tmp4	%read{17,17} %write{16,16}
const	int	$const8	0		%read{19,300} %write{2147483647,-1}
temp	int	$tmp5	%read{20,40} %write{20,40}
temp	int	$tmp6	%read{18,40} %write{19,40}
temp	float	$tmp7	%read{20,40} %write{20,40}
const	string	$const9	"signed"		%read{24,295} %write{2147483647,-1}
const	string	$const10	"safe_noise"		%read{22,293} %write{2147483647,-1}
temp	int	$tmp8	%read{20,40} %write{20,40}
const	string	$const11	"perlin"		%read{26,297} %write{2147483647,-1}
temp	int	$tmp9	%read{20,40} %write{20,40}
temp	int	$tmp10	%read{20,40} %write{20,40}
const	float	$const12	0.5		%read{31,302} %write{2147483647,-1}
temp	float	$tmp11	%read{20,40} %write{20,40}
temp	float	$tmp12	%read{20,40} %write{20,40}
const	int	$const13	1		%read{40,288} %write{2147483647,-1}
temp	int	$tmp13	%read{2147483647,-1} %write{20,40}
temp	float	$tmp14	%read{42,42} %write{41,41}
temp	int	$tmp15	%read{44,44} %write{43,43}
temp	float	$tmp16	%read{58,58} %write{45,45}
temp	float	$tmp17	%read{58,58} %write{55,57}
temp	int	$tmp18	%read{49,49} %write{48,48}
temp	int	$tmp19	%read{53,53} %write{52,52}
temp	int	$tmp20	%read{54,54} %write{53,53}
temp	float	$tmp21	%read{59,59} %write{58,58}
temp	float	$tmp22	%read{60,60} %write{59,59}
const	string	$const14	"fBM"		%read{63,63} %write{2147483647,-1}
temp	int	$tmp23	%read{64,64} %write{63,63}
temp	float	$tmp24	%read{112,112} %write{111,111}
const	string	$const15	"noise_musgrave_fBm"		%read{65,65} %write{2147483647,-1}
temp	float	$tmp25	%read{69,69} %write{68,68}
temp	int	$tmp26	%read{72,91} %write{72,91}
temp	int	$tmp27	%read{70,91} %write{71,91}
temp	float	$tmp28	%read{72,91} %write{72,91}
temp	int	$tmp29	%read{72,91} %write{72,91}
temp	int	$tmp30	%read{72,91} %write{72,91}
temp	int	$tmp31	%read{72,91} %write{72,91}
temp	float	$tmp32	%read{72,91} %write{72,91}
temp	int	$tmp33	%read{2147483647,-1} %write{72,91}
temp	float	$tmp34	%read{93,93} %write{92,92}
temp	int	$tmp35	%read{95,95} %write{94,94}
temp	float	$tmp36	%read{108,108} %write{105,107}
temp	int	$tmp37	%read{99,99} %write{98,98}
temp	int	$tmp38	%read{103,103} %write{102,102}
temp	int	$tmp39	%read{104,104} %write{103,103}
temp	float	$tmp40	%read{109,109} %write{108,108}
temp	float	$tmp41	%read{110,110} %write{109,109}
const	string	$const16	"hybrid_multifractal"		%read{113,113} %write{2147483647,-1}
temp	int	$tmp42	%read{114,114} %write{113,113}
temp	float	$tmp43	%read{189,189} %write{188,188}
const	string	$const17	"noise_musgrave_hybrid_multi_fractal"		%read{115,115} %write{2147483647,-1}
temp	float	$tmp44	%read{117,117} %write{116,116}
temp	float	$tmp45	%read{131,131} %write{128,130}
temp	int	$tmp46	%read{122,122} %write{121,121}
temp	int	$tmp47	%read{126,126} %write{125,125}
temp	int	$tmp48	%read{127,127} %write{126,126}
const	float	$const18	0.001		%read{136,136} %write{2147483647,-1}
temp	int	$tmp49	%read{136,167} %write{136,167}
temp	int	$tmp50	%read{134,167} %write{135,167}
temp	int	$tmp51	%read{136,167} %write{136,167}
temp	int	$tmp52	%read{136,167} %write{136,167}
temp	int	$tmp53	%read{136,167} %write{136,167}
temp	int	$tmp54	%read{136,167} %write{136,167}
temp	float	$tmp55	%read{136,167} %write{136,167}
temp	int	$tmp56	%read{136,167} %write{136,167}
temp	int	$tmp57	%read{136,167} %write{136,167}
temp	int	$tmp58	%read{136,167} %write{136,167}
temp	float	$tmp59	%read{136,167} %write{136,167}
temp	float	$tmp60	%read{136,167} %write{136,167}
temp	float	$tmp61	%read{136,167} %write{136,167}
temp	int	$tmp62	%read{2147483647,-1} %write{136,167}
temp	float	$tmp63	%read{169,169} %write{168,168}
temp	int	$tmp64	%read{171,171} %write{170,170}
temp	float	$tmp65	%read{184,184} %write{181,183}
temp	int	$tmp66	%read{175,175} %write{174,174}
temp	int	$tmp67	%read{179,179} %write{178,178}
temp	int	$tmp68	%read{180,180} %write{179,179}
temp	float	$tmp69	%read{185,185} %write{184,184}
temp	float	$tmp70	%read{186,186} %write{185,185}
temp	float	$tmp71	%read{187,187} %write{186,186}
const	string	$const19	"ridged_multifractal"		%read{190,190} %write{2147483647,-1}
temp	int	$tmp72	%read{191,191} %write{190,190}
temp	float	$tmp73	%read{244,244} %write{243,243}
const	string	$const20	"noise_musgrave_ridged_multi_fractal"		%read{192,192} %write{2147483647,-1}
temp	float	$tmp74	%read{194,194} %write{193,193}
temp	float	$tmp75	%read{209,209} %write{208,208}
temp	float	$tmp76	%read{208,208} %write{205,207}
temp	int	$tmp77	%read{199,199} %write{198,198}
temp	int	$tmp78	%read{203,203} %write{202,202}
temp	int	$tmp79	%read{204,204} %write{203,203}
temp	int	$tmp80	%read{215,242} %write{215,242}
temp	int	$tmp81	%read{213,242} %write{214,242}
temp	float	$tmp82	%read{215,242} %write{215,242}
temp	float	$tmp83	%read{215,242} %write{215,242}
temp	float	$tmp84	%read{215,242} %write{215,242}
temp	float	$tmp85	%read{215,242} %write{215,242}
temp	int	$tmp86	%read{215,242} %write{215,242}
temp	int	$tmp87	%read{215,242} %write{215,242}
temp	int	$tmp88	%read{215,242} %write{215,242}
temp	float	$tmp89	%read{215,242} %write{215,242}
temp	int	$tmp90	%read{2147483647,-1} %write{215,242}
const	string	$const21	"hetero_terrain"		%read{245,245} %write{2147483647,-1}
temp	int	$tmp91	%read{246,246} %write{245,245}
temp	float	$tmp92	%read{311,311} %write{310,310}
const	string	$const22	"noise_musgrave_hetero_terrain"		%read{247,247} %write{2147483647,-1}
temp	float	$tmp93	%read{249,249} %write{248,248}
temp	float	$tmp94	%read{263,263} %write{260,262}
temp	int	$tmp95	%read{254,254} %write{253,253}
temp	int	$tmp96	%read{258,258} %write{257,257}
temp	int	$tmp97	%read{259,259} %write{258,258}
temp	int	$tmp98	%read{267,288} %write{267,288}
temp	int	$tmp99	%read{265,288} %write{266,288}
temp	float	$tmp100	%read{267,288} %write{267,288}
temp	int	$tmp101	%read{267,288} %write{267,288}
temp	int	$tmp102	%read{267,288} %write{267,288}
temp	int	$tmp103	%read{267,288} %write{267,288}
temp	float	$tmp104	%read{267,288} %write{267,288}
temp	float	$tmp105	%read{267,288} %write{267,288}
temp	int	$tmp106	%read{2147483647,-1} %write{267,288}
temp	float	$tmp107	%read{290,290} %write{289,289}
temp	int	$tmp108	%read{292,292} %write{291,291}
temp	float	$tmp109	%read{305,305} %write{302,304}
temp	int	$tmp110	%read{296,296} %write{295,295}
temp	int	$tmp111	%read{300,300} %write{299,299}
temp	int	$tmp112	%read{301,301} %write{300,300}
temp	float	$tmp113	%read{306,306} %write{305,305}
temp	float	$tmp114	%read{307,307} %write{306,306}
temp	float	$tmp115	%read{309,309} %write{308,308}
code Vector
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:197
# 	point Vector = P,
	assign		Vector P 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{197} %argrw{"wr"}
code ___main___
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:201
# 	float dimension = max(Dimension, 1e-5);
	max		dimension Dimension $const1 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{201} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:202
# 	float octaves = clamp(Detail, 0.0, 16.0);
	functioncall	$const4 5 	%line{202} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1 Detail $const3 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/stdosl.h"} %line{144} %argrw{"wrr"}
	max		octaves $tmp1 $const2 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:203
# 	float rmd;
	max		lacunarity Lacunarity $const1 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{203} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:204
# 	float value = 1.0;
	assign		intensity $const5 	%line{204} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:206
# 	float pwHL = pow(lacunarity, -H);
	assign		p Vector 	%line{206} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:208
# 
	if		use_mapping 10 10 	%line{208} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:209
# 	for (i = 0; i < (int)octaves; i++) {
	transform	p mapping p 	%line{209} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:211
# 		pwr *= pwHL;
	mul		p p Scale 	%line{211} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:213
# 	}
	eq		$tmp2 type $const6 	%line{213} %argrw{"wrr"}
	if		$tmp2 63 312 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:214
# 
	functioncall	$const7 62 	%line{214} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:60
# 	float value = 1.0;
	assign		___668_value $const5 	%line{60} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:61
# 	float pwr = 1.0;
	assign		___668_pwr $const5 	%line{61} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:62
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp4 dimension 	%line{62} %argrw{"wr"}
	pow		___668_pwHL lacunarity $tmp4 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:65
# 	for (i = 0; i < (int)octaves; i++) {
	for		$tmp6 20 22 39 41 	%line{65} %argrw{"r"}
	assign		___668_i $const8 	%argrw{"wr"}
	assign		$tmp5 octaves 	%argrw{"wr"}
	lt		$tmp6 ___668_i $tmp5 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:66
# 		value *= (pwr * safe_noise(p, "signed") + 1.0);
	functioncall	$const10 34 	%line{66} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# }
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# {
	eq		$tmp8 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp8 27 28 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 	/* returns distances in da and point coords in pa */
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 	yi = (int)floor(p[1]);
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	da[0] = 1e10;
	isfinite	$tmp9 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp10 $tmp9 $const8 	%argrw{"wrr"}
	if		$tmp10 33 33 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 	da[1] = 1e10;
	assign		$tmp7 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	da[3] = 1e10;
	assign		$tmp7 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:66
# 		value *= (pwr * safe_noise(p, "signed") + 1.0);
	mul		$tmp11 ___668_pwr $tmp7 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{66} %argrw{"wrr"}
	add		$tmp12 $tmp11 $const5 	%argrw{"wrr"}
	mul		___668_value ___668_value $tmp12 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:67
# 		pwr *= pwHL;
	mul		___668_pwr ___668_pwr ___668_pwHL 	%line{67} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:68
# 		p *= lacunarity;
	mul		p p lacunarity 	%line{68} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:65
# 	for (i = 0; i < (int)octaves; i++) {
	assign		$tmp13 ___668_i 	%line{65} %argrw{"wr"}
	add		___668_i ___668_i $const13 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:71
# 	rmd = octaves - floor(octaves);
	floor		$tmp14 octaves 	%line{71} %argrw{"wr"}
	sub		___668_rmd octaves $tmp14 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:72
# 	if (rmd != 0.0)
	neq		$tmp15 ___668_rmd $const2 	%line{72} %argrw{"wrr"}
	if		$tmp15 61 61 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:73
# 		value *= (rmd * pwr * safe_noise(p, "signed") + 1.0); /* correct? */
	mul		$tmp16 ___668_rmd ___668_pwr 	%line{73} %argrw{"wrr"}
	functioncall	$const10 58 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# color cellnoise_color(point p)
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	eq		$tmp18 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp18 51 52 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	/* returns distances in da and point coords in pa */
	isfinite	$tmp19 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp20 $tmp19 $const8 	%argrw{"wrr"}
	if		$tmp20 57 57 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 	int xx, yy, zz, xi, yi, zi;
	assign		$tmp17 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	xi = (int)floor(p[0]);
	assign		$tmp17 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:73
# 		value *= (rmd * pwr * safe_noise(p, "signed") + 1.0); /* correct? */
	mul		$tmp21 $tmp16 $tmp17 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{73} %argrw{"wrr"}
	add		$tmp22 $tmp21 $const5 	%argrw{"wrr"}
	mul		___668_value ___668_value $tmp22 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:75
# 	return value;
	assign		$tmp3 ___668_value 	%line{75} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:214
# 		Fac = intensity * noise_musgrave_multi_fractal(p, dimension, lacunarity, octaves);
	mul		Fac intensity $tmp3 	%line{214} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:215
# 	else if (type == "fBM")
	eq		$tmp23 type $const14 	%line{215} %argrw{"wrr"}
	if		$tmp23 113 312 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:216
# 		Fac = intensity * noise_musgrave_fBm(p, dimension, lacunarity, octaves);
	functioncall	$const15 112 	%line{216} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:32
# 	float value = 0.0;
	assign		___665_value $const2 	%line{32} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:33
# 	float pwr = 1.0;
	assign		___665_pwr $const5 	%line{33} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:34
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp25 dimension 	%line{34} %argrw{"wr"}
	pow		___665_pwHL lacunarity $tmp25 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:37
# 	for (i = 0; i < (int)octaves; i++) {
	for		$tmp27 72 74 90 92 	%line{37} %argrw{"r"}
	assign		___665_i $const8 	%argrw{"wr"}
	assign		$tmp26 octaves 	%argrw{"wr"}
	lt		$tmp27 ___665_i $tmp26 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:38
# 		value += safe_noise(p, "signed") * pwr;
	functioncall	$const10 86 	%line{38} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 					da[2] = da[1];
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 
	eq		$tmp29 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp29 79 80 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 					pa[3] = pa[2];
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 				}
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 					da[2] = da[1];
	isfinite	$tmp30 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp31 $tmp30 $const8 	%argrw{"wrr"}
	if		$tmp31 85 85 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 					da[1] = d;
	assign		$tmp28 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 					pa[3] = pa[2];
	assign		$tmp28 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:38
# 		value += safe_noise(p, "signed") * pwr;
	mul		$tmp32 $tmp28 ___665_pwr 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{38} %argrw{"wrr"}
	add		___665_value ___665_value $tmp32 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:39
# 		pwr *= pwHL;
	mul		___665_pwr ___665_pwr ___665_pwHL 	%line{39} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:40
# 		p *= lacunarity;
	mul		p p lacunarity 	%line{40} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:37
# 	for (i = 0; i < (int)octaves; i++) {
	assign		$tmp33 ___665_i 	%line{37} %argrw{"wr"}
	add		___665_i ___665_i $const13 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:43
# 	rmd = octaves - floor(octaves);
	floor		$tmp34 octaves 	%line{43} %argrw{"wr"}
	sub		___665_rmd octaves $tmp34 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:44
# 	if (rmd != 0.0)
	neq		$tmp35 ___665_rmd $const2 	%line{44} %argrw{"wrr"}
	if		$tmp35 111 111 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:45
# 		value += rmd * safe_noise(p, "signed") * pwr;
	functioncall	$const10 108 	%line{45} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 				point pd = p - (vp + ip);
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 				vp += point(xx, yy, zz);
	eq		$tmp37 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp37 101 102 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 					da[1] = da[0];
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = pa[2];
	isfinite	$tmp38 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp39 $tmp38 $const8 	%argrw{"wrr"}
	if		$tmp39 107 107 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 					pa[2] = pa[1];
	assign		$tmp36 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 					pa[0] = vp;
	assign		$tmp36 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:45
# 		value += rmd * safe_noise(p, "signed") * pwr;
	mul		$tmp40 ___665_rmd $tmp36 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{45} %argrw{"wrr"}
	mul		$tmp41 $tmp40 ___665_pwr 	%argrw{"wrr"}
	add		___665_value ___665_value $tmp41 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:47
# 	return value;
	assign		$tmp24 ___665_value 	%line{47} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:216
# 		Fac = intensity * noise_musgrave_fBm(p, dimension, lacunarity, octaves);
	mul		Fac intensity $tmp24 	%line{216} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:217
# 	else if (type == "hybrid_multifractal")
	eq		$tmp42 type $const16 	%line{217} %argrw{"wrr"}
	if		$tmp42 190 312 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:218
# 		Fac = intensity * noise_musgrave_hybrid_multi_fractal(p, dimension, lacunarity, octaves, Offset, Gain);
	functioncall	$const17 189 	%line{218} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:125
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp44 dimension 	%line{125} %argrw{"wr"}
	pow		___675_pwHL lacunarity $tmp44 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:126
# 	float pwr = pwHL;
	assign		___675_pwr ___675_pwHL 	%line{126} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:129
# 	result = safe_noise(p, "signed") + offset;
	functioncall	$const10 131 	%line{129} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 	float f = 0.0;
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 	if (type == "signed")
	eq		$tmp46 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp46 124 125 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 		f = noise("perlin", p);
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 		f = noise(p);
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp47 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp48 $tmp47 $const8 	%argrw{"wrr"}
	if		$tmp48 130 130 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 		return 0.5;
	assign		$tmp45 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	return f;
	assign		$tmp45 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:129
#  * lacunarity: gap between successive frequencies
	add		___675_result $tmp45 Offset 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{129} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:130
#  * octaves: number of frequencies in the fBm
	mul		___675_weight Gain ___675_result 	%line{130} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:131
#  *
	mul		p p lacunarity 	%line{131} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:133
#  */
	for		$tmp50 136 143 166 168 	%line{133} %argrw{"r"}
	assign		___675_i $const13 	%argrw{"wr"}
	gt		$tmp49 ___675_weight $const18 	%argrw{"wrr"}
	neq		$tmp50 $tmp49 $const8 	%argrw{"wrr"}
	if		$tmp50 143 143 	%argrw{"r"}
	assign		$tmp51 octaves 	%argrw{"wr"}
	lt		$tmp52 ___675_i $tmp51 	%argrw{"wrr"}
	neq		$tmp53 $tmp52 $const8 	%argrw{"wrr"}
	assign		$tmp50 $tmp53 	%argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:134
# 
	gt		$tmp54 ___675_weight $const5 	%line{134} %argrw{"wrr"}
	if		$tmp54 146 146 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:135
# float noise_musgrave_fBm(point p, float H, float lacunarity, float octaves)
	assign		___675_weight $const5 	%line{135} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:137
# 	float rmd;
	functioncall	$const10 158 	%line{137} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 	float f = 0.0;
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 	if (type == "signed")
	eq		$tmp56 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp56 151 152 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 		f = noise("perlin", p);
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 		f = noise(p);
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp57 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp58 $tmp57 $const8 	%argrw{"wrr"}
	if		$tmp58 157 157 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 		return 0.5;
	assign		$tmp55 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	return f;
	assign		$tmp55 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:137
# 	float rmd;
	add		$tmp59 $tmp55 Offset 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{137} %argrw{"wrr"}
	mul		___675_signal $tmp59 ___675_pwr 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:138
# 	float value = 0.0;
	mul		___675_pwr ___675_pwr ___675_pwHL 	%line{138} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:139
# 	float pwr = 1.0;
	mul		$tmp60 ___675_weight ___675_signal 	%line{139} %argrw{"wrr"}
	add		___675_result ___675_result $tmp60 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:140
# 	float pwHL = pow(lacunarity, -H);
	mul		$tmp61 Gain ___675_signal 	%line{140} %argrw{"wrr"}
	mul		___675_weight ___675_weight $tmp61 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:141
# 	int i;
	mul		p p lacunarity 	%line{141} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:133
# 	for (i = 1; (weight > 0.001) && (i < (int)octaves); i++) {
	assign		$tmp62 ___675_i 	%line{133} %argrw{"wr"}
	add		___675_i ___675_i $const13 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:144
# 	rmd = octaves - floor(octaves);
	floor		$tmp63 octaves 	%line{144} %argrw{"wr"}
	sub		___675_rmd octaves $tmp63 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:145
# 	if (rmd != 0.0)
	neq		$tmp64 ___675_rmd $const2 	%line{145} %argrw{"wrr"}
	if		$tmp64 188 188 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:146
# 		result += rmd * ((safe_noise(p, "signed") + offset) * pwr);
	functioncall	$const10 184 	%line{146} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 	float f = 0.0;
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 	if (type == "signed")
	eq		$tmp66 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp66 177 178 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 		f = noise("perlin", p);
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 		f = noise(p);
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp67 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp68 $tmp67 $const8 	%argrw{"wrr"}
	if		$tmp68 183 183 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 		return 0.5;
	assign		$tmp65 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	return f;
	assign		$tmp65 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:146
# 		p *= lacunarity;
	add		$tmp69 $tmp65 Offset 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{146} %argrw{"wrr"}
	mul		$tmp70 $tmp69 ___675_pwr 	%argrw{"wrr"}
	mul		$tmp71 ___675_rmd $tmp70 	%argrw{"wrr"}
	add		___675_result ___675_result $tmp71 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:148
# 
	assign		$tmp43 ___675_result 	%line{148} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:218
# 
	mul		Fac intensity $tmp43 	%line{218} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:219
# /* Hybrid Additive/Multiplicative Multifractal Terrain
	eq		$tmp72 type $const19 	%line{219} %argrw{"wrr"}
	if		$tmp72 245 312 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:220
#  *
	functioncall	$const20 244 	%line{220} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:163
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp74 dimension 	%line{163} %argrw{"wr"}
	pow		___678_pwHL lacunarity $tmp74 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:164
# 	float pwr = pwHL;
	assign		___678_pwr ___678_pwHL 	%line{164} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:167
# 	signal = offset - fabs(safe_noise(p, "signed"));
	functioncall	$const10 208 	%line{167} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 	float f = 0.0;
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 	if (type == "signed")
	eq		$tmp77 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp77 201 202 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 		f = noise("perlin", p);
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 		f = noise(p);
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp78 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp79 $tmp78 $const8 	%argrw{"wrr"}
	if		$tmp79 207 207 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 		return 0.5;
	assign		$tmp76 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	return f;
	assign		$tmp76 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:167
# 	float pwr = 1.0;
	fabs		$tmp75 $tmp76 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{167} %argrw{"wr"}
	sub		___678_signal Offset $tmp75 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:168
# 	float pwHL = pow(lacunarity, -H);
	mul		___678_signal ___678_signal ___678_signal 	%line{168} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:169
# 	int i;
	assign		___678_result ___678_signal 	%line{169} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:170
# 
	assign		___678_weight $const5 	%line{170} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:172
# 		value *= (pwr * safe_noise(p, "signed") + 1.0);
	for		$tmp81 215 217 241 243 	%line{172} %argrw{"r"}
	assign		___678_i $const13 	%argrw{"wr"}
	assign		$tmp80 octaves 	%argrw{"wr"}
	lt		$tmp81 ___678_i $tmp80 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:173
# 		pwr *= pwHL;
	mul		p p lacunarity 	%line{173} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:174
# 		p *= lacunarity;
	mul		$tmp82 ___678_signal Gain 	%line{174} %argrw{"wrr"}
	functioncall	$const4 222 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp83 $tmp82 $const5 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/stdosl.h"} %line{144} %argrw{"wrr"}
	max		___678_weight $tmp83 $const2 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:175
# 	float rmd;
	functioncall	$const10 234 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{175} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 	float f = 0.0;
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 	if (type == "signed")
	eq		$tmp86 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp86 227 228 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 		f = noise("perlin", p);
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 		f = noise(p);
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp87 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp88 $tmp87 $const8 	%argrw{"wrr"}
	if		$tmp88 233 233 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 		return 0.5;
	assign		$tmp85 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	return f;
	assign		$tmp85 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:175
# 	}
	fabs		$tmp84 $tmp85 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{175} %argrw{"wr"}
	sub		___678_signal Offset $tmp84 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:176
# 
	mul		___678_signal ___678_signal ___678_signal 	%line{176} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:177
# 	rmd = octaves - floor(octaves);
	mul		___678_signal ___678_signal ___678_weight 	%line{177} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:178
# 	if (rmd != 0.0)
	mul		$tmp89 ___678_signal ___678_pwr 	%line{178} %argrw{"wrr"}
	add		___678_result ___678_result $tmp89 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:179
# 		value *= (rmd * pwr * safe_noise(p, "signed") + 1.0); /* correct? */
	mul		___678_pwr ___678_pwr ___678_pwHL 	%line{179} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:172
# 	for (i = 1; i < (int)octaves; i++) {
	assign		$tmp90 ___678_i 	%line{172} %argrw{"wr"}
	add		___678_i ___678_i $const13 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:182
# 	return result;
	assign		$tmp73 ___678_result 	%line{182} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:220
# 		Fac = intensity * noise_musgrave_ridged_multi_fractal(p, dimension, lacunarity, octaves, Offset, Gain);
	mul		Fac intensity $tmp73 	%line{220} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:221
# 	else if (type == "hetero_terrain")
	eq		$tmp91 type $const21 	%line{221} %argrw{"wrr"}
	if		$tmp91 312 312 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:222
# 		Fac = intensity * noise_musgrave_hetero_terrain(p, dimension, lacunarity, octaves, Offset);
	functioncall	$const22 311 	%line{222} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:89
# 	float pwHL = pow(lacunarity, -H);
	neg		$tmp93 dimension 	%line{89} %argrw{"wr"}
	pow		___671_pwHL lacunarity $tmp93 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:90
# 	float pwr = pwHL;
	assign		___671_pwr ___671_pwHL 	%line{90} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:94
# 	value = offset + safe_noise(p, "signed");
	functioncall	$const10 263 	%line{94} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 	float f = 0.0;
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 	if (type == "signed")
	eq		$tmp95 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp95 256 257 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 		f = noise("perlin", p);
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 		f = noise(p);
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp96 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp97 $tmp96 $const8 	%argrw{"wrr"}
	if		$tmp97 262 262 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 		return 0.5;
	assign		$tmp94 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	return f;
	assign		$tmp94 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:94
# 	value = offset + safe_noise(p, "signed");
	add		___671_value Offset $tmp94 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{94} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:95
# 	p *= lacunarity;
	mul		p p lacunarity 	%line{95} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:97
# 	for (i = 1; i < (int)octaves; i++) {
	for		$tmp99 267 269 287 289 	%line{97} %argrw{"r"}
	assign		___671_i $const13 	%argrw{"wr"}
	assign		$tmp98 octaves 	%argrw{"wr"}
	lt		$tmp99 ___671_i $tmp98 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:98
# 		increment = (safe_noise(p, "signed") + offset) * pwr * value;
	functioncall	$const10 281 	%line{98} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 	float f = 0.0;
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 	if (type == "signed")
	eq		$tmp101 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp101 274 275 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 		f = noise("perlin", p);
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 		f = noise(p);
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp102 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp103 $tmp102 $const8 	%argrw{"wrr"}
	if		$tmp103 280 280 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 		return 0.5;
	assign		$tmp100 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	return f;
	assign		$tmp100 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:98
# 		increment = (safe_noise(p, "signed") + offset) * pwr * value;
	add		$tmp104 $tmp100 Offset 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %line{98} %argrw{"wrr"}
	mul		$tmp105 $tmp104 ___671_pwr 	%argrw{"wrr"}
	mul		___671_increment $tmp105 ___671_value 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:99
# 		value += increment;
	add		___671_value ___671_value ___671_increment 	%line{99} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:100
# 		pwr *= pwHL;
	mul		___671_pwr ___671_pwr ___671_pwHL 	%line{100} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:101
# 		p *= lacunarity;
	mul		p p lacunarity 	%line{101} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:97
# 	for (i = 1; i < (int)octaves; i++) {
	assign		$tmp106 ___671_i 	%line{97} %argrw{"wr"}
	add		___671_i ___671_i $const13 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:104
# 	rmd = octaves - floor(octaves);
	floor		$tmp107 octaves 	%line{104} %argrw{"wr"}
	sub		___671_rmd octaves $tmp107 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:105
# 	if (rmd != 0.0) {
	neq		$tmp108 ___671_rmd $const2 	%line{105} %argrw{"wrr"}
	if		$tmp108 310 310 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:106
# 		increment = (safe_noise(p, "signed") + offset) * pwr * value;
	functioncall	$const10 305 	%line{106} %argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:92
# 	float f = 0.0;
	assign		___658_f $const2 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h"} %line{92} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:95
# 	if (type == "signed")
	eq		$tmp110 $const9 $const9 	%line{95} %argrw{"wrr"}
	if		$tmp110 298 299 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:96
# 		f = noise("perlin", p);
	noise		___658_f $const11 p 	%line{96} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:100
# 		f = noise(p);
	noise		___658_f p 	%line{100} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:103
# 	if (!isfinite(f))
	isfinite	$tmp111 ___658_f 	%line{103} %argrw{"wr"}
	eq		$tmp112 $tmp111 $const8 	%argrw{"wrr"}
	if		$tmp112 304 304 	%argrw{"r"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:104
# 		return 0.5;
	assign		$tmp109 $const12 	%line{104} %argrw{"wr"}
	return
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_texture.h:106
# 	return f;
	assign		$tmp109 ___658_f 	%line{106} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:106
# 	return f;
	add		$tmp113 $tmp109 Offset 	%filename{"/home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl"} %argrw{"wrr"}
	mul		$tmp114 $tmp113 ___671_pwr 	%argrw{"wrr"}
	mul		___671_increment $tmp114 ___671_value 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:107
# /*
	mul		$tmp115 ___671_rmd ___671_increment 	%line{107} %argrw{"wrr"}
	add		___671_value ___671_value $tmp115 	%argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:110
#  * Licensed under the Apache License, Version 2.0 (the "License");
	assign		$tmp92 ___671_value 	%line{110} %argrw{"wr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:222
#  * lacunarity: gap between successive frequencies
	mul		Fac intensity $tmp92 	%line{222} %argrw{"wrr"}
# /home/sources/blender-release/intern/cycles/kernel/shaders/node_musgrave_texture.osl:224
#  * offset: raises the terrain from `sea level'
	color		Color Fac Fac Fac 	%line{224} %argrw{"wrrr"}
	end
